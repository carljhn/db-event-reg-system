'use client'

import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

interface AlumniFormProps {
  onBack: () => void
}

export function AlumniForm({ onBack }: AlumniFormProps) {
  const [step, setStep] = useState(1)
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    graduationYear: '',
    course: '',
    degree: '',
    currentJob: ''
  })

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value })
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (step < 4) {
      setStep(step + 1)
    } else {
      console.log('Form submitted:', formData)
      // Here you would typically send the data to your backend
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="mb-4">
        <div className="flex items-center justify-between">
          {[1, 2, 3, 4].map((i) => (
            <div key={i} className={`w-1/4 h-2 ${i <= step ? 'bg-[#800000]' : 'bg-gray-200'}`}></div>
          ))}
        </div>
        <div className="text-xs text-gray-500 mt-1">Step {step} of 4</div>
      </div>
      {step === 1 && (
        <>
          <div className="space-y-2">
            <Label htmlFor="name">Full Name</Label>
            <Input id="name" name="name" value={formData.name} onChange={handleChange} required className="border-[#800000] focus:ring-[#800000]" />
          </div>
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input id="email" name="email" type="email" value={formData.email} onChange={handleChange} required className="border-[#800000] focus:ring-[#800000]" />
          </div>
        </>
      )}
      {step === 2 && (
        <>
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input id="password" name="password" type="password" value={formData.password} onChange={handleChange} required className="border-[#800000] focus:ring-[#800000]" />
          </div>
          <div className="space-y-2">
            <Label htmlFor="graduationYear">Graduation Year</Label>
            <Input id="graduationYear" name="graduationYear" type="number" min="1900" max="2099" value={formData.graduationYear} onChange={handleChange} required className="border-[#800000] focus:ring-[#800000]" />
          </div>
        </>
      )}
      {step === 3 && (
        <>
          <div className="space-y-2">
            <Label htmlFor="degree">Degree Obtained</Label>
            <Input id="degree" name="degree" value={formData.degree} onChange={handleChange} required className="border-[#800000] focus:ring-[#800000]" />
          </div>
          <div className="space-y-2">
            <Label htmlFor="course">Course</Label>
            <Input id="course" name="course" value={formData.course} onChange={handleChange} required className="border-[#800000] focus:ring-[#800000]" />
          </div>
        </>
      )}
      {step === 4 && (
        <div className="space-y-2">
          <Label htmlFor="currentJob">Current Job</Label>
          <Input id="currentJob" name="currentJob" value={formData.currentJob} onChange={handleChange} required className="border-[#800000] focus:ring-[#800000]" />
        </div>
      )}
      <div className="flex justify-between mt-6">
        {step > 1 ? (
          <Button type="button" onClick={() => setStep(step - 1)} className="bg-gray-300 text-gray-800 hover:bg-gray-400">Previous</Button>
        ) : (
          <Button type="button" onClick={onBack} className="bg-gray-300 text-gray-800 hover:bg-gray-400">Back</Button>
        )}
        <Button type="submit" className="bg-[#800000] hover:bg-[#600000]">{step === 4 ? 'Submit' : 'Next'}</Button>
      </div>
    </form>
  )
}

